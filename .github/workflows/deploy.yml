name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  workflow_dispatch: # Allows manual trigger

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Lark notification - Deployment Started
        run: |
          curl -X POST "${{ secrets.LARK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "msg_type": "text",
              "content": {
                "text": "üöÄ Deployment Started\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nTriggered by: ${{ github.actor }}\nWorkflow: ${{ github.workflow }}"
              }
            }'

      - name: Deploy to DigitalOcean Server
        id: deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            echo "üöÄ Starting deployment..."

            # Set variables (adjust these paths as needed)
            PROJECT_PATH="/home/${{ secrets.USERNAME }}/edvara-fe"
            REPO_URL="https://github.com/${{ github.repository }}.git"

            # Create project directory if it doesn't exist
            mkdir -p "$(dirname "$PROJECT_PATH")"

            # Check if project directory exists and has git repository
            if [ -d "$PROJECT_PATH/.git" ]; then
              echo "üìÇ Project exists, pulling latest changes..."
              cd "$PROJECT_PATH"
              git fetch origin main
              git reset --hard origin/main
            else
              echo "üì• Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_PATH"
              cd "$PROJECT_PATH"
            fi

            # Check if Node.js and npm are available
            if ! command -v node &> /dev/null; then
              echo "‚ùå Node.js is not installed. Please install Node.js first."
              exit 1
            fi

            echo "üîç Checking project directory..."
            ls -la

            echo "cd to project path"
            cd edvara-fe

            # Install dependencies
            echo "üì¶ Installing dependencies..."
            npm ci --production=false

            # Build the project
            echo "üî® Building project..."
            npm run build

            # Check if build was successful
            if [ -d "dist" ]; then
              echo "‚úÖ Build completed successfully!"
              echo "üìÅ Build files are in: $PROJECT_PATH/dist"
            else
              echo "‚ùå Build failed - no dist directory found"
              exit 1
            fi

            # Optional: Copy build files to web server directory
            # Uncomment and adjust path as needed for your web server setup
            # echo "üöÄ Copying files to web server..."
            # sudo cp -r dist/* /var/www/html/
            # sudo chown -R www-data:www-data /var/www/html/

            # Optional: Restart web server if needed
            # echo "üîÑ Restarting web server..."
            # sudo systemctl restart nginx

            echo "‚úÖ Deployment completed successfully!"

      - name: Send Lark notification - Deployment Success
        if: success()
        run: |
          curl -X POST "${{ secrets.LARK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "msg_type": "text",
              "content": {
                "text": "‚úÖ Deployment Completed Successfully\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nTriggered by: ${{ github.actor }}\nWorkflow: ${{ github.workflow }}\n\nüéâ Your application has been deployed!"
              }
            }'

      - name: Send Lark notification - Deployment Failed
        if: failure()
        run: |
          curl -X POST "${{ secrets.LARK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "msg_type": "text",
              "content": {
                "text": "‚ùå Deployment Failed\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nTriggered by: ${{ github.actor }}\nWorkflow: ${{ github.workflow }}\n\n‚ö†Ô∏è Please check the workflow logs for details."
              }
            }'
